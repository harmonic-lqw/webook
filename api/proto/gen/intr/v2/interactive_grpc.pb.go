// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: intr/v2/interactive.proto

package intrv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InteractiveRepository_IncrReadCnt_FullMethodName       = "/intr.v2.InteractiveRepository/IncrReadCnt"
	InteractiveRepository_BatchIncrReadCnt_FullMethodName  = "/intr.v2.InteractiveRepository/BatchIncrReadCnt"
	InteractiveRepository_IncrLike_FullMethodName          = "/intr.v2.InteractiveRepository/IncrLike"
	InteractiveRepository_DecrLike_FullMethodName          = "/intr.v2.InteractiveRepository/DecrLike"
	InteractiveRepository_AddCollectionItem_FullMethodName = "/intr.v2.InteractiveRepository/AddCollectionItem"
	InteractiveRepository_Get_FullMethodName               = "/intr.v2.InteractiveRepository/Get"
	InteractiveRepository_Liked_FullMethodName             = "/intr.v2.InteractiveRepository/Liked"
	InteractiveRepository_Collected_FullMethodName         = "/intr.v2.InteractiveRepository/Collected"
	InteractiveRepository_GetByIds_FullMethodName          = "/intr.v2.InteractiveRepository/GetByIds"
)

// InteractiveRepositoryClient is the client API for InteractiveRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractiveRepositoryClient interface {
	IncrReadCnt(ctx context.Context, in *IncrReadCntRequest, opts ...grpc.CallOption) (*IncrReadCntResponse, error)
	BatchIncrReadCnt(ctx context.Context, in *BatchIncrReadCntRequest, opts ...grpc.CallOption) (*BatchIncrReadCntResponse, error)
	IncrLike(ctx context.Context, in *IncrLikeRequest, opts ...grpc.CallOption) (*IncrLikeResponse, error)
	DecrLike(ctx context.Context, in *DecrLikeRequest, opts ...grpc.CallOption) (*DecrLikeResponse, error)
	AddCollectionItem(ctx context.Context, in *AddCollectionItemRequest, opts ...grpc.CallOption) (*AddCollectionItemResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Liked(ctx context.Context, in *LikedRequest, opts ...grpc.CallOption) (*LikedResponse, error)
	Collected(ctx context.Context, in *CollectedRequest, opts ...grpc.CallOption) (*CollectedResponse, error)
	GetByIds(ctx context.Context, in *GetByIdsRequest, opts ...grpc.CallOption) (*GetByIdsResponse, error)
}

type interactiveRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractiveRepositoryClient(cc grpc.ClientConnInterface) InteractiveRepositoryClient {
	return &interactiveRepositoryClient{cc}
}

func (c *interactiveRepositoryClient) IncrReadCnt(ctx context.Context, in *IncrReadCntRequest, opts ...grpc.CallOption) (*IncrReadCntResponse, error) {
	out := new(IncrReadCntResponse)
	err := c.cc.Invoke(ctx, InteractiveRepository_IncrReadCnt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveRepositoryClient) BatchIncrReadCnt(ctx context.Context, in *BatchIncrReadCntRequest, opts ...grpc.CallOption) (*BatchIncrReadCntResponse, error) {
	out := new(BatchIncrReadCntResponse)
	err := c.cc.Invoke(ctx, InteractiveRepository_BatchIncrReadCnt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveRepositoryClient) IncrLike(ctx context.Context, in *IncrLikeRequest, opts ...grpc.CallOption) (*IncrLikeResponse, error) {
	out := new(IncrLikeResponse)
	err := c.cc.Invoke(ctx, InteractiveRepository_IncrLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveRepositoryClient) DecrLike(ctx context.Context, in *DecrLikeRequest, opts ...grpc.CallOption) (*DecrLikeResponse, error) {
	out := new(DecrLikeResponse)
	err := c.cc.Invoke(ctx, InteractiveRepository_DecrLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveRepositoryClient) AddCollectionItem(ctx context.Context, in *AddCollectionItemRequest, opts ...grpc.CallOption) (*AddCollectionItemResponse, error) {
	out := new(AddCollectionItemResponse)
	err := c.cc.Invoke(ctx, InteractiveRepository_AddCollectionItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveRepositoryClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, InteractiveRepository_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveRepositoryClient) Liked(ctx context.Context, in *LikedRequest, opts ...grpc.CallOption) (*LikedResponse, error) {
	out := new(LikedResponse)
	err := c.cc.Invoke(ctx, InteractiveRepository_Liked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveRepositoryClient) Collected(ctx context.Context, in *CollectedRequest, opts ...grpc.CallOption) (*CollectedResponse, error) {
	out := new(CollectedResponse)
	err := c.cc.Invoke(ctx, InteractiveRepository_Collected_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveRepositoryClient) GetByIds(ctx context.Context, in *GetByIdsRequest, opts ...grpc.CallOption) (*GetByIdsResponse, error) {
	out := new(GetByIdsResponse)
	err := c.cc.Invoke(ctx, InteractiveRepository_GetByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractiveRepositoryServer is the server API for InteractiveRepository service.
// All implementations must embed UnimplementedInteractiveRepositoryServer
// for forward compatibility
type InteractiveRepositoryServer interface {
	IncrReadCnt(context.Context, *IncrReadCntRequest) (*IncrReadCntResponse, error)
	BatchIncrReadCnt(context.Context, *BatchIncrReadCntRequest) (*BatchIncrReadCntResponse, error)
	IncrLike(context.Context, *IncrLikeRequest) (*IncrLikeResponse, error)
	DecrLike(context.Context, *DecrLikeRequest) (*DecrLikeResponse, error)
	AddCollectionItem(context.Context, *AddCollectionItemRequest) (*AddCollectionItemResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Liked(context.Context, *LikedRequest) (*LikedResponse, error)
	Collected(context.Context, *CollectedRequest) (*CollectedResponse, error)
	GetByIds(context.Context, *GetByIdsRequest) (*GetByIdsResponse, error)
	mustEmbedUnimplementedInteractiveRepositoryServer()
}

// UnimplementedInteractiveRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedInteractiveRepositoryServer struct {
}

func (UnimplementedInteractiveRepositoryServer) IncrReadCnt(context.Context, *IncrReadCntRequest) (*IncrReadCntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrReadCnt not implemented")
}
func (UnimplementedInteractiveRepositoryServer) BatchIncrReadCnt(context.Context, *BatchIncrReadCntRequest) (*BatchIncrReadCntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchIncrReadCnt not implemented")
}
func (UnimplementedInteractiveRepositoryServer) IncrLike(context.Context, *IncrLikeRequest) (*IncrLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrLike not implemented")
}
func (UnimplementedInteractiveRepositoryServer) DecrLike(context.Context, *DecrLikeRequest) (*DecrLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrLike not implemented")
}
func (UnimplementedInteractiveRepositoryServer) AddCollectionItem(context.Context, *AddCollectionItemRequest) (*AddCollectionItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollectionItem not implemented")
}
func (UnimplementedInteractiveRepositoryServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedInteractiveRepositoryServer) Liked(context.Context, *LikedRequest) (*LikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liked not implemented")
}
func (UnimplementedInteractiveRepositoryServer) Collected(context.Context, *CollectedRequest) (*CollectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collected not implemented")
}
func (UnimplementedInteractiveRepositoryServer) GetByIds(context.Context, *GetByIdsRequest) (*GetByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIds not implemented")
}
func (UnimplementedInteractiveRepositoryServer) mustEmbedUnimplementedInteractiveRepositoryServer() {}

// UnsafeInteractiveRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractiveRepositoryServer will
// result in compilation errors.
type UnsafeInteractiveRepositoryServer interface {
	mustEmbedUnimplementedInteractiveRepositoryServer()
}

func RegisterInteractiveRepositoryServer(s grpc.ServiceRegistrar, srv InteractiveRepositoryServer) {
	s.RegisterService(&InteractiveRepository_ServiceDesc, srv)
}

func _InteractiveRepository_IncrReadCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrReadCntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveRepositoryServer).IncrReadCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveRepository_IncrReadCnt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveRepositoryServer).IncrReadCnt(ctx, req.(*IncrReadCntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveRepository_BatchIncrReadCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchIncrReadCntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveRepositoryServer).BatchIncrReadCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveRepository_BatchIncrReadCnt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveRepositoryServer).BatchIncrReadCnt(ctx, req.(*BatchIncrReadCntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveRepository_IncrLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveRepositoryServer).IncrLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveRepository_IncrLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveRepositoryServer).IncrLike(ctx, req.(*IncrLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveRepository_DecrLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveRepositoryServer).DecrLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveRepository_DecrLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveRepositoryServer).DecrLike(ctx, req.(*DecrLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveRepository_AddCollectionItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectionItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveRepositoryServer).AddCollectionItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveRepository_AddCollectionItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveRepositoryServer).AddCollectionItem(ctx, req.(*AddCollectionItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveRepository_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveRepositoryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveRepository_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveRepositoryServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveRepository_Liked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveRepositoryServer).Liked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveRepository_Liked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveRepositoryServer).Liked(ctx, req.(*LikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveRepository_Collected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveRepositoryServer).Collected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveRepository_Collected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveRepositoryServer).Collected(ctx, req.(*CollectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveRepository_GetByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveRepositoryServer).GetByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveRepository_GetByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveRepositoryServer).GetByIds(ctx, req.(*GetByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractiveRepository_ServiceDesc is the grpc.ServiceDesc for InteractiveRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractiveRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "intr.v2.InteractiveRepository",
	HandlerType: (*InteractiveRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncrReadCnt",
			Handler:    _InteractiveRepository_IncrReadCnt_Handler,
		},
		{
			MethodName: "BatchIncrReadCnt",
			Handler:    _InteractiveRepository_BatchIncrReadCnt_Handler,
		},
		{
			MethodName: "IncrLike",
			Handler:    _InteractiveRepository_IncrLike_Handler,
		},
		{
			MethodName: "DecrLike",
			Handler:    _InteractiveRepository_DecrLike_Handler,
		},
		{
			MethodName: "AddCollectionItem",
			Handler:    _InteractiveRepository_AddCollectionItem_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _InteractiveRepository_Get_Handler,
		},
		{
			MethodName: "Liked",
			Handler:    _InteractiveRepository_Liked_Handler,
		},
		{
			MethodName: "Collected",
			Handler:    _InteractiveRepository_Collected_Handler,
		},
		{
			MethodName: "GetByIds",
			Handler:    _InteractiveRepository_GetByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "intr/v2/interactive.proto",
}
